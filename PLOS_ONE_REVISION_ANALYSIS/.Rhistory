HelaS3_Peaks = get.lengths.of.peaks(narrowPeakFileName)
HelaS3_Peaks
dim(HelaS3_Peaks)
get.lengths.of.peaks <- function(fileOfPeaks){
  peaks = read.table(fileOfPeaks)
  Lengths =  peaks[,3] - peaks[,2]
  Lengths
  
}#get.lengths.of.peaks#
HelaS3_Peaks = get.lengths.of.peaks(narrowPeakFileName)
hist(HelaS3_Peaks)
max(HelaS3_Peaks)
HelaS3narrowPeakFileName  = "/nfs/th_group/hk3/SYD_TFS/HelaS3/All/Chr22/Chr22_Sorted/HelaS3_Union_of_Peaks.bed"
HelaS3_Peaks = get.lengths.of.peaks(HelaS3narrowPeakFileName )
GM12878NarrowPeakFileName = "/nfs/th_group/hk3/SYD_TFS/Gm12878/All/Chr22/Chr22_Sorted/GM12878_union_of_peaks.bed"
GM12878_Peaks = get.lengths.of.peaks(GM12878NarrowPeakFileName)
hist(GM12878_Peaks)
max(GM12878_Peaks)
length(which(GM12878_Peaks>5000))
length(which(HelaS3_Peaks>5000))
length(which(GM12878_Peaks>10000))
length(which(HelaS3_Peaks>10000))
length(which(HelaS3_Peaks>20000))
length(which(HelaS3_Peaks>20000))
length(which(HelaS3_Peaks>20000))
length(which(GM12878_Peaks>20000))
GM12878_Peaks>20000
GM12878NarrowPeakFileNameLongPeakRemoved = "/nfs/th_group/hk3/SYD_TFS/Gm12878/All/Chr22/Chr22_Sorted/GM12878_union_of_peaks_Long_Peak_Removed"
GM12878_Peaks_Long_Peak_Removed = get.lengths.of.peaks(GM12878NarrowPeakFileNameLongPeakRemoved)
GM12878NarrowPeakFileNameLongPeakRemoved = "/nfs/th_group/hk3/SYD_TFS/Gm12878/All/Chr22/Chr22_Sorted/GM12878_union_of_peaks_Long_Peak_Removed.npf"
GM12878_Peaks_Long_Peak_Removed = get.lengths.of.peaks(GM12878NarrowPeakFileNameLongPeakRemoved)
hist(GM12878_Peaks_Long_Peak_Removed)
GM12878.TFs.vs.UW.Long.Peak.Removed = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/sensspec_Union_of_TFs_vs_Randomly_Removed_Tags_Long_Peak_Removed.txt"
GM12878.TFs.vs.Duke.Long.Peak.Removed = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/sensspec_Union_of_TFs_vs_Duke_GM12878_Long_Peak_Removed.txt"
GM12878.TFs.vs.Randomly.Removed.Tags.Long.Peak.Removed = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/sensspec_Union_of_TFs_vs_Randomly_Removed_Tags_Long_Peak_Removed.txt"
precision.and.recall(TFs.vs.UW.File_t_4, TFs.vs.Duke.File_t_4, "K562", Model='F_Score', beta = 0.5, start.Threshold=3)
precision.and.recall(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Duke.Long.Peak.Removed, "GM12878", Model='F_Score', beta = 0.5, start.Threshold=3)
precision.and.recall(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Duke.Long.Peak.Removed, "GM12878", Model='F_Score', beta = 0.4, start.Threshold=3)
precision.and.recall(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Duke.Long.Peak.Removed, "GM12878", Model='F_Score', beta = 0.3, start.Threshold=3)
precision.and.recall(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Duke.Long.Peak.Removed, "GM12878", Model='F_Score', beta = 0.5, start.Threshold=3)
plot.effects.of.randomly.removing.tags <- function(TFs.vs.UW.File, TFs.vs.Randomly.Removed.Tags, Title, Model='Additive_Average', beta = 1, start.Threshold=1, Cell.Line = "  "){
 
  UW.Data          = read.table(TFs.vs.UW.File)
  Precision.UW     = UW.Data[ , 5]
  Recall.UW        =  UW.Data[ , 6]
  Thresholds.UW    =  UW.Data[ , 1]
  print(Thresholds.UW)
  
  Precision.UW.limited = Precision.UW[start.Threshold:length(Precision.UW)-1 ]
  Recall.UW.limited    = Recall.UW[start.Threshold:length(Recall.UW)-1   ]
  Threholds.limited    = Thresholds.UW[start.Threshold:length(Thresholds.UW )-1   ]
  Randomly.Removed.Tags = read.table(TFs.vs.Randomly.Removed.Tags)
  Precision.Random    = Randomly.Removed.Tags[ ,5]
  Recall.Random       = Randomly.Removed.Tags[ ,6]
  Thresholds.Random   = Randomly.Removed.Tags[ ,1]
  print(Thresholds.Random)
  
   Precision.Random.limited  =  Precision.Random[start.Threshold:length(Precision.Random)  ] 
   Recall.Random.limited     =  Recall.Random[start.Threshold:length(Recall.Random) ] 
   Thresholds.Random.limited =  Thresholds.Random[start.Threshold:length(Thresholds.Random) ]
  print(Thresholds.Random.limited)
  if(Model == 'Additive_Average'){
    UW.Overlap           = ( Precision.UW.limited + Recall.UW.limited )/2
    Random.Overlap       = (Precision.Random.limited + Recall.Random.limited  )/2
    Ylab   = paste(' (precision+recall)/2')
  }
  else if (Model == 'F_Score' ){
    Ylab = paste("F_",beta,"_Score", sep="")
    cofficent   = (1+(beta)^2)
     UW.Overlap   = cofficent *    (Precision.UW.limited   * Recall.UW.limited)   /  (((beta)^2 * Precision.UW.limited) + Recall.UW.limited)
     Random.Overlap = cofficent *  (Precision.Random.limited* Recall.Random.limited)/(((beta)^2 * Precision.Random.limited)+Recall.Random.limited) 
     
    
  }
  else{
    stop("Unknown model!")
  }
  
  plot(UW.Overlap~Threholds.limited, lwd = 3, col = 'red', type= 'l', xlab='Threshold', ylab = Ylab, main = Title)
  lines(Random.Overlap~Thresholds.Random.limited , lty=2, lwd =3, col='blue')
  legend('bottomright', legend= c("Removed Based On Scores", "Removed Randomly"), col= c('red', 'blue'), text.col = c('red', 'blue'))
  
 }#plot.effects.of.randomly.removing.tags#
plot.effects.of.randomly.removing.tags(TFs.vs.UW.File_t_4, Randomly.Removed.Tags, "UW: K562", Model='F_Score', beta = 0.5, start.Threshold=1)
plot.effects.of.randomly.removing.tags(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Randomly.Removed.Tags.Long.Peak.Removed, "UW: GM12878", Model='F_Score', beta = 0.5, start.Threshold=1)
GM12878.TFs.vs.UW.Long.Peak.Removed = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/sensspec_Union_of_TFs_vs_UW_GM12878_Long_Peak_Removed.txt"
GM12878.TFs.vs.Duke.Long.Peak.Removed = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/sensspec_Union_of_TFs_vs_Duke_GM12878_Long_Peak_Removed.txt"
GM12878.TFs.vs.Randomly.Removed.Tags.Long.Peak.Removed = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/sensspec_Union_of_TFs_vs_Randomly_Removed_Tags_Long_Peak_Removed.txt"
precision.and.recall(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Duke.Long.Peak.Removed, "GM12878", Model='F_Score', beta = 0.5, start.Threshold=3)
plot.effects.of.randomly.removing.tags(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Randomly.Removed.Tags.Long.Peak.Removed, "UW: GM12878", Model='F_Score', beta = 0.5, start.Threshold=1)
GM12878.TFs.vs.UW.Long.Peak.Removed = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/sensspec_Union_of_TFs_vs_UW_GM12878_Long_Peak_Removed.txt"
GM12878.TFs.vs.Duke.Long.Peak.Removed = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/sensspec_Union_of_TFs_vs_Duke_GM12878_Long_Peak_Removed.txt"
GM12878.TFs.vs.Randomly.Removed.Tags.Long.Peak.Removed = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/sensspec_Union_of_TFs_vs_Randomly_Removed_Tags_Long_Peak_Removed.txt"
precision.and.recall(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Duke.Long.Peak.Removed, "GM12878", Model='F_Score', beta = 0.5, start.Threshold=3)
plot.effects.of.randomly.removing.tags(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Randomly.Removed.Tags.Long.Peak.Removed, "UW: GM12878", Model='F_Score', beta = 0.5, start.Threshold=1)
plot.effects.of.randomly.removing.tags <- function(TFs.vs.UW.File, TFs.vs.Randomly.Removed.Tags, Title, Model='Additive_Average', beta = 1, start.Threshold=1, Cell.Line = "  "){
 
  UW.Data          = read.table(TFs.vs.UW.File)
  Precision.UW     = UW.Data[ , 5]
  Recall.UW        =  UW.Data[ , 6]
  Thresholds.UW    =  UW.Data[ , 1]
  print(Thresholds.UW)
  
  Precision.UW.limited = Precision.UW[start.Threshold:length(Precision.UW) ]
  Recall.UW.limited    = Recall.UW[start.Threshold:length(Recall.UW)   ]
  Threholds.limited    = Thresholds.UW[start.Threshold:length(Thresholds.UW )  ]
  Randomly.Removed.Tags = read.table(TFs.vs.Randomly.Removed.Tags)
  Precision.Random    = Randomly.Removed.Tags[ ,5]
  Recall.Random       = Randomly.Removed.Tags[ ,6]
  Thresholds.Random   = Randomly.Removed.Tags[ ,1]
  print(Thresholds.Random)
  
   Precision.Random.limited  =  Precision.Random[start.Threshold:length(Precision.Random)  ] 
   Recall.Random.limited     =  Recall.Random[start.Threshold:length(Recall.Random) ] 
   Thresholds.Random.limited =  Thresholds.Random[start.Threshold:length(Thresholds.Random) ]
  print(Thresholds.Random.limited)
  if(Model == 'Additive_Average'){
    UW.Overlap           = ( Precision.UW.limited + Recall.UW.limited )/2
    Random.Overlap       = (Precision.Random.limited + Recall.Random.limited  )/2
    Ylab   = paste(' (precision+recall)/2')
  }
  else if (Model == 'F_Score' ){
    Ylab = paste("F_",beta,"_Score", sep="")
    cofficent   = (1+(beta)^2)
     UW.Overlap   = cofficent *    (Precision.UW.limited   * Recall.UW.limited)   /  (((beta)^2 * Precision.UW.limited) + Recall.UW.limited)
     Random.Overlap = cofficent *  (Precision.Random.limited* Recall.Random.limited)/(((beta)^2 * Precision.Random.limited)+Recall.Random.limited) 
     
    
  }
  else{
    stop("Unknown model!")
  }
  
  plot(UW.Overlap~Threholds.limited, lwd = 3, col = 'red', type= 'l', xlab='Threshold', ylab = Ylab, main = Title)
  lines(Random.Overlap~Thresholds.Random.limited , lty=2, lwd =3, col='blue')
  legend('bottomright', legend= c("Removed Based On Scores", "Removed Randomly"), col= c('red', 'blue'), text.col = c('red', 'blue'))
  
 }#plot.effects.of.randomly.removing.tags#
plot.effects.of.randomly.removing.tags(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Randomly.Removed.Tags.Long.Peak.Removed, "UW: GM12878", Model='F_Score', beta = 0.5, start.Threshold=1)
plot.effects.of.randomly.removing.tags(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Randomly.Removed.Tags.Long.Peak.Removed, "UW: GM12878", Model='F_Score', beta = 0.5, start.Threshold=2)
precision.and.recall(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Duke.Long.Peak.Removed, "GM12878", Model='F_Score', beta = 0.5, start.Threshold=3)
precision.and.recall(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Duke.Long.Peak.Removed, "GM12878", Model='F_Score', beta = 0.45, start.Threshold=3)
precision.and.recall(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Duke.Long.Peak.Removed, "GM12878", Model='F_Score', beta = 0.4, start.Threshold=3)
precision.and.recall(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Duke.Long.Peak.Removed, "GM12878", Model='F_Score', beta = 0.3, start.Threshold=3)
precision.and.recall(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Duke.Long.Peak.Removed, "GM12878", Model='F_Score', beta = 1, start.Threshold=3)
precision.and.recall(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Duke.Long.Peak.Removed, "GM12878", Model='F_Score', beta = 0.5, start.Threshold=3)
plot.effects.of.randomly.removing.tags(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Randomly.Removed.Tags.Long.Peak.Removed, "UW: GM12878", Model='F_Score', beta = 0.5, start.Threshold=2)
hist(HelaS3_Peaks, col= 'red', breaks = 100)
par(mfrow = c(1,1))
hist(HelaS3_Peaks, col= 'red', breaks = 100)
hist(GM12878_Peaks, col= 'red', breaks = 100)
hist(GM12878NarrowPeakFileNameLongPeakRemoved , col= 'red', breaks = 100)
hist(GM12878_Peaks_Long_Peak_Removed, col= 'red', breaks = 100)
hist(GM12878_Peaks, col= 'red', breaks = 100)
hist(HelaS3_Peaks, col= 'red', breaks = 100)
par(mfrow = c(1,2))
hist(HelaS3_Peaks, col= 'red', breaks = 100, xlab='length of narrowPeaks', main = "HelaS3")
hist(GM12878_Peaks, col= 'red', breaks = 100, xlab='length of narrowPeaks', main = "GM12878")
hist(HelaS3_Peaks, col= 'red', breaks = 100, xlab='length of narrowPeaks', main = "HelaS3")
hist(GM12878_Peaks_Long_Peak_Removed, col= 'red', breaks = 100)
hist(HelaS3_Peaks, col= 'red', breaks = 100, xlab='length of narrowPeaks', main = "HelaS3")
hist(GM12878_Peaks_Long_Peak_Removed, col= 'red', breaks = 100, xlab='length of narrowPeaks', main = "GM12878")
min(GM12878_Peaks_Long_Peak_Removed)
min(HelaS3_Peaks)
which(GM12878_Peaks_Long_Peak_Removed == 1)
which(GM12878_Peaks_Long_Peak_Removed <10)
which(HelaS3_Peaks <10)
lenght(which(HelaS3_Peaks <10))
length(which(HelaS3_Peaks <10))
length(which(GM12878_Peaks_Long_Peak_Removed <10))
plot.effects.of.randomly.removing.tags(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Randomly.Removed.Tags.Long.Peak.Removed, "UW: GM12878", Model='F_Score', beta = 0.5, start.Threshold=2)
pwd
GM12878.TFs.vs.UW.Long.Peak.Removed = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/sensspec_Union_of_TFs_vs_UW_GM12878_Long_Peak_Removed.txt"
GM12878.TFs.vs.Duke.Long.Peak.Removed = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/sensspec_Union_of_TFs_vs_Duke_GM12878_Long_Peak_Removed.txt"
GM12878.TFs.vs.Randomly.Removed.Tags.Long.Peak.Removed = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/sensspec_Union_of_TFs_vs_Randomly_Removed_Tags_Long_Peak_Removed.txt"
plot.effects.of.randomly.removing.tags(GM12878.TFs.vs.UW.Long.Peak.Removed, GM12878.TFs.vs.Randomly.Removed.Tags.Long.Peak.Removed, "UW: GM12878", Model='F_Score', beta = 0.5, start.Threshold=2)
 K562.UW.vs.TFs.File = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/K562_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_K562.txt"
 K562.Duke.vs.TFs.File = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/K562_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_Duke_K562.txt"
 K562.UW.Randomly.Removed.vs.TFs.File = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/K562_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_K562_Randomly_Removed_Tags.txt"
GM12878.UW.vs.TFs.File = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_Gm12878.txt"
 GM12878.Duke.vs.TFs.File = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_Duke_Gm12878.txt"
 GM12878.UW.Randomly.Removed.vs.TFs = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_Gm12878_Randomly_Moved_Tags.txt"
precision.and.recall <- function(TFs.vs.UW.File, TFs.vs.Duke.File, Title, Model='Additive_Average', beta = 1, start.Threshold=1){
  
  UW.Data          = read.table(TFs.vs.UW.File)
  Precision.UW     = UW.Data[ , 5]
  Recall.UW        =  UW.Data[ , 6]
  Thresholds.UW    =  UW.Data[ , 1]
  Duke.Data       = read.table(TFs.vs.Duke.File)
  Precision.Duke  =  Duke.Data[ , 5]
  Recall.Duke     =  Duke.Data[ , 6]
  Thresholds.Duke = Duke.Data[ ,1]
  if (! all(Thresholds.UW ==  Thresholds.Duke)){
    print(paste("Threshlds used for UW and Duke do not look the same! check your data") )
  }
  par(mfrow = c(1,2))
  Precision.UW.limited = Precision.UW[start.Threshold:length(Precision.UW) ]
  Recall.UW.limited    = Recall.UW[start.Threshold:length(Recall.UW)   ]
  Threholds.limited    = Thresholds.UW[start.Threshold:length(Thresholds.UW )   ]
  
  
  Precision.Duke.limited = Precision.Duke[start.Threshold:length(Precision.Duke)  ]
  Recall.Duke.limited    = Recall.Duke[start.Threshold:length(Recall.Duke)  ]
  if(Model == 'Additive_Average'){
    UW.Overlap           = ( Precision.UW.limited + Recall.UW.limited )/2
    Duke.Overlap        = (Precision.Duke.limited + Recall.Duke.limited)/2
    Ylab   = paste(' (precision+recall)/2')
  }
  else if (Model == 'F_Score' ){
    Ylab = paste("F_",beta,"_Score", sep="")
    cofficent   = (1+(beta)^2)
     UW.Overlap   = cofficent *  (Precision.UW.limited   * Recall.UW.limited)   /(((beta)^2 * Precision.UW.limited) + Recall.UW.limited)
     Duke.Overlap = cofficent *  (Precision.Duke.limited * Recall.Duke.limited) /(((beta)^2 * Precision.Duke.limited) + Recall.Duke.limited)
    
  }
  else{
    stop("Unknown model!")
  }
  
  plot(UW.Overlap~Threholds.limited, lwd = 3, col = 'red', type= 'l', xlab='Threshold', ylab = Ylab, main = 'UW')
  plot(Duke.Overlap~Threholds.limited, lwd = 3, col='blue', type='l', xlab='Threshold', ylab = Ylab, main='Duke')
 }#precision.and.recall#
plot.effects.of.randomly.removing.tags <- function(TFs.vs.UW.File, TFs.vs.Randomly.Removed.Tags, Title, Model='Additive_Average', beta = 1, start.Threshold=1, Cell.Line = "  "){
 
  UW.Data          = read.table(TFs.vs.UW.File)
  Precision.UW     = UW.Data[ , 5]
  Recall.UW        =  UW.Data[ , 6]
  Thresholds.UW    =  UW.Data[ , 1]
  print(Thresholds.UW)
  
  Precision.UW.limited = Precision.UW[start.Threshold:length(Precision.UW) ]
  Recall.UW.limited    = Recall.UW[start.Threshold:length(Recall.UW)   ]
  Threholds.limited    = Thresholds.UW[start.Threshold:length(Thresholds.UW )  ]
  Randomly.Removed.Tags = read.table(TFs.vs.Randomly.Removed.Tags)
  Precision.Random    = Randomly.Removed.Tags[ ,5]
  Recall.Random       = Randomly.Removed.Tags[ ,6]
  Thresholds.Random   = Randomly.Removed.Tags[ ,1]
  print(Thresholds.Random)
  
   Precision.Random.limited  =  Precision.Random[start.Threshold:length(Precision.Random)  ] 
   Recall.Random.limited     =  Recall.Random[start.Threshold:length(Recall.Random) ] 
   Thresholds.Random.limited =  Thresholds.Random[start.Threshold:length(Thresholds.Random) ]
  print(Thresholds.Random.limited)
  if(Model == 'Additive_Average'){
    UW.Overlap           = ( Precision.UW.limited + Recall.UW.limited )/2
    Random.Overlap       = (Precision.Random.limited + Recall.Random.limited  )/2
    Ylab   = paste(' (precision+recall)/2')
  }
  else if (Model == 'F_Score' ){
    Ylab = paste("F_",beta,"_Score", sep="")
    cofficent   = (1+(beta)^2)
     UW.Overlap   = cofficent *    (Precision.UW.limited   * Recall.UW.limited)   /  (((beta)^2 * Precision.UW.limited) + Recall.UW.limited)
     Random.Overlap = cofficent *  (Precision.Random.limited* Recall.Random.limited)/(((beta)^2 * Precision.Random.limited)+Recall.Random.limited) 
     
    
  }
  else{
    stop("Unknown model!")
  }
  
  plot(UW.Overlap~Threholds.limited, lwd = 3, col = 'red', type= 'l', xlab='Threshold', ylab = Ylab, main = Title)
  lines(Random.Overlap~Thresholds.Random.limited , lty=2, lwd =3, col='blue')
  legend('bottomright', legend= c("Removed Based On Scores", "Removed Randomly"), col= c('red', 'blue'), text.col = c('red', 'blue'))
  
 }#plot.effects.of.randomly.removing.tags#
plot.effects.of.randomly.removing.tags(K562.UW.vs.TFs.File, K562.UW.Randomly.Removed.vs.TFs.File, "UW: K562", Model='F_Score', beta = 0.5, start.Threshold=4)
HelaS3.UW.vs.TFs.File                   = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/HelaS3_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_HelaS3.txt"
HelaS3.Duke.vs.TFs.File                 = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/HelaS3_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_Duke_HelaS3.txt"
HelaS3.UW.Randomly.Removed.vs.TFs.File  = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/HelaS3_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_HelaS3_Randomly_Removed_Tags.txt"
plot.effects.of.randomly.removing.tags(HelaS3.UW.vs.TFs.File, HelaS3.UW.Randomly.Removed.vs.TFs.File, "UW: HelaS3", Model='F_Score', beta = 0.5, start.Threshold=4)
precision.and.recall(K562.UW.vs.TFs.File, K562.Duke.vs.TFs.File, "K562", Model='F_Score', beta = 0.5, start.Threshold=5)
precision.and.recall(HelaS3.UW.vs.TFs.File, HelaS3.Duke.vs.TFs.File, "HelaS3", Model='F_Score', beta = 0.5, start.Threshold=5)
plot.effects.of.randomly.removing.tags(HelaS3.UW.vs.TFs.File, HelaS3.UW.Randomly.Removed.vs.TFs.File, "UW: HelaS3", Model='F_Score', beta = 0.5, start.Threshold=4)
plot.effects.of.randomly.removing.tags(HelaS3.UW.vs.TFs.File, HelaS3.UW.Randomly.Removed.vs.TFs.File, "UW: HelaS3", Model='F_Score', beta = 0.5, start.Threshold=4)
par(mfrow= c(1,1))
plot.effects.of.randomly.removing.tags(HelaS3.UW.vs.TFs.File, HelaS3.UW.Randomly.Removed.vs.TFs.File, "UW: HelaS3", Model='F_Score', beta = 0.5, start.Threshold=4)
precision.and.recall(HelaS3.UW.vs.TFs.File, HelaS3.Duke.vs.TFs.File, "HelaS3", Model='F_Score', beta = 0.5, start.Threshold=5)
plot.effects.of.randomly.removing.tags(HelaS3.UW.vs.TFs.File, HelaS3.UW.Randomly.Removed.vs.TFs.File, "UW: HelaS3", Model='F_Score', beta = 0.5, start.Threshold=4)
par(mfrow = c(1,3))
plot.effects.of.randomly.removing.tags(HelaS3.UW.vs.TFs.File, HelaS3.UW.Randomly.Removed.vs.TFs.File, "UW: HelaS3", Model='F_Score', beta = 0.5, start.Threshold=4)
plot.effects.of.randomly.removing.tags(K562.UW.vs.TFs.File, K562.UW.Randomly.Removed.vs.TFs.File, "UW: K562", Model='F_Score', beta = 0.5, start.Threshold=4)
plot.effects.of.randomly.removing.tags(GM12878.UW.vs.TFs.File, GM12878.UW.Randomly.Removed.vs.TFs., "UW: GM12878", Model='F_Score', beta = 0.5, start.Threshold=1)
GM12878.UW.vs.TFs.File = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_Gm12878.txt"
 GM12878.Duke.vs.TFs.File = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_Duke_Gm12878.txt"
 GM12878.UW.Randomly.Removed.vs.TFs = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_Gm12878_Randomly_Moved_Tags.txt"
plot.effects.of.randomly.removing.tags(GM12878.UW.vs.TFs.File, GM12878.UW.Randomly.Removed.vs.TFs., "UW: GM12878", Model='F_Score', beta = 0.5, start.Threshold=1)
plot.effects.of.randomly.removing.tags(GM12878.UW.vs.TFs.File, GM12878.UW.Randomly.Removed.vs.TFs, "UW: GM12878", Model='F_Score', beta = 0.5, start.Threshold=1)
par(mfrow=c(1,1))
precision.and.recall(HelaS3.UW.vs.TFs.File, HelaS3.Duke.vs.TFs.File, "HelaS3", Model='F_Score', beta = 0.5, start.Threshold=5)
get.nct.freqs <- function(nctsFile){
  data = read.table(nctsFile)
  data
}#get.nct.freqs#
K562_Ncts_Freqs = get.nct.freqs("/nfs/th_group/hk3/UW_DNaseI_HS/K562_For_Paper_Analysis/K562_Freq_of_ncts_in_ENCODE_DHS.txt")
K562_Ncts_Freqs 
?read.table
get.nct.freqs <- function(nctsFile){
  data = read.table(nctsFile, header = TRUE)
  data
}#get.nct.freqs#
K562_Ncts_Freqs = get.nct.freqs("/nfs/th_group/hk3/UW_DNaseI_HS/K562_For_Paper_Analysis/K562_Freq_of_ncts_in_ENCODE_DHS.txt")
colnames(K562_Ncts_Freqs)
mean(K562_Ncts_Freqs$A)
mean(K562_Ncts_Freqs$C)
mean(K562_Ncts_Freqs$G)
mean(K562_Ncts_Freqs$T)
Gm12878_Ncts_Freqs = get.nct.freqs("/nfs/th_group/hk3/UW_DNaseI_HS/Gm12878_For_Paper_Analysis/Gm12878_Freq_of_ncts_in_ENCODE_DHS.txt")
colMeans(Gm12878_Ncts_Freqs)
H1hesc_Ncts_Freqs = get.nct.freqs("/nfs/th_group/hk3/UW_DNaseI_HS/H1hesc_For_Paper_Analysis/H1hesc_Freq_of_ncts_in_ENCODE_DHS.txt")
colMeans(H1hesc_Ncts_Freqs)
colMeans(K562_Ncts_Freqs)
(0.2515612 + 0.2196121 + 0.2430262)/3
(0.2566193 + 0.2805418 + 0.2498335)/3
K562.UW.vs.TFs.File = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/K562_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_K562.txt"
 K562.Duke.vs.TFs.File = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/K562_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_Duke_K562.txt"
 K562.UW.Randomly.Removed.vs.TFs.File = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/K562_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_K562_Randomly_Removed_Tags.txt"
GM12878.UW.vs.TFs.File = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_Gm12878.txt"
 GM12878.Duke.vs.TFs.File = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_Duke_Gm12878.txt"
 GM12878.UW.Randomly.Removed.vs.TFs = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/GM12878_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_Gm12878_Randomly_Moved_Tags.txt"
HelaS3.UW.vs.TFs.File                   = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/HelaS3_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_HelaS3.txt"
HelaS3.Duke.vs.TFs.File                 = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/HelaS3_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_Duke_HelaS3.txt"
HelaS3.UW.Randomly.Removed.vs.TFs.File  = "/nfs/users/nfs_h/hk3/My_CPlusPlus/Overlaps_in_Beds/HelaS3_TFs_vs_DHS/Common_Set_SensSpec_Union_of_TFs_vs_UW_HelaS3_Randomly_Removed_Tags.txt"
precision.and.recall <- function(TFs.vs.UW.File, TFs.vs.Duke.File, Title, Model='Additive_Average', beta = 1, start.Threshold=1){
  
  UW.Data          = read.table(TFs.vs.UW.File)
  Precision.UW     = UW.Data[ , 5]
  Recall.UW        =  UW.Data[ , 6]
  Thresholds.UW    =  UW.Data[ , 1]
  Duke.Data       = read.table(TFs.vs.Duke.File)
  Precision.Duke  =  Duke.Data[ , 5]
  Recall.Duke     =  Duke.Data[ , 6]
  Thresholds.Duke = Duke.Data[ ,1]
  if (! all(Thresholds.UW ==  Thresholds.Duke)){
    print(paste("Threshlds used for UW and Duke do not look the same! check your data") )
  }
  par(mfrow = c(1,2))
  Precision.UW.limited = Precision.UW[start.Threshold:length(Precision.UW) ]
  Recall.UW.limited    = Recall.UW[start.Threshold:length(Recall.UW)   ]
  Threholds.limited    = Thresholds.UW[start.Threshold:length(Thresholds.UW )   ]
  
  
  Precision.Duke.limited = Precision.Duke[start.Threshold:length(Precision.Duke)  ]
  Recall.Duke.limited    = Recall.Duke[start.Threshold:length(Recall.Duke)  ]
  if(Model == 'Additive_Average'){
    UW.Overlap           = ( Precision.UW.limited + Recall.UW.limited )/2
    Duke.Overlap        = (Precision.Duke.limited + Recall.Duke.limited)/2
    Ylab   = paste(' (precision+recall)/2')
  }
  else if (Model == 'F_Score' ){
    Ylab = paste("F_",beta,"_Score", sep="")
    cofficent   = (1+(beta)^2)
     UW.Overlap   = cofficent *  (Precision.UW.limited   * Recall.UW.limited)   /(((beta)^2 * Precision.UW.limited) + Recall.UW.limited)
     Duke.Overlap = cofficent *  (Precision.Duke.limited * Recall.Duke.limited) /(((beta)^2 * Precision.Duke.limited) + Recall.Duke.limited)
    
  }
  else{
    stop("Unknown model!")
  }
  
  plot(UW.Overlap~Threholds.limited, lwd = 3, col = 'red', type= 'l', xlab='Threshold', ylab = Ylab, main = 'UW')
  plot(Duke.Overlap~Threholds.limited, lwd = 3, col='blue', type='l', xlab='Threshold', ylab = Ylab, main='Duke')
 }#precision.and.recall#
plot.effects.of.randomly.removing.tags <- function(TFs.vs.UW.File, TFs.vs.Randomly.Removed.Tags, Title, Model='Additive_Average', beta = 1, start.Threshold=1, Cell.Line = "  "){
 
  UW.Data          = read.table(TFs.vs.UW.File)
  Precision.UW     = UW.Data[ , 5]
  Recall.UW        =  UW.Data[ , 6]
  Thresholds.UW    =  UW.Data[ , 1]
  print(Thresholds.UW)
  
  Precision.UW.limited = Precision.UW[start.Threshold:length(Precision.UW) ]
  Recall.UW.limited    = Recall.UW[start.Threshold:length(Recall.UW)   ]
  Threholds.limited    = Thresholds.UW[start.Threshold:length(Thresholds.UW )  ]
  Randomly.Removed.Tags = read.table(TFs.vs.Randomly.Removed.Tags)
  Precision.Random    = Randomly.Removed.Tags[ ,5]
  Recall.Random       = Randomly.Removed.Tags[ ,6]
  Thresholds.Random   = Randomly.Removed.Tags[ ,1]
  print(Thresholds.Random)
  
   Precision.Random.limited  =  Precision.Random[start.Threshold:length(Precision.Random)  ] 
   Recall.Random.limited     =  Recall.Random[start.Threshold:length(Recall.Random) ] 
   Thresholds.Random.limited =  Thresholds.Random[start.Threshold:length(Thresholds.Random) ]
  print(Thresholds.Random.limited)
  if(Model == 'Additive_Average'){
    UW.Overlap           = ( Precision.UW.limited + Recall.UW.limited )/2
    Random.Overlap       = (Precision.Random.limited + Recall.Random.limited  )/2
    Ylab   = paste(' (precision+recall)/2')
  }
  else if (Model == 'F_Score' ){
    Ylab = paste("F_",beta,"_Score", sep="")
    cofficent   = (1+(beta)^2)
     UW.Overlap   = cofficent *    (Precision.UW.limited   * Recall.UW.limited)   /  (((beta)^2 * Precision.UW.limited) + Recall.UW.limited)
     Random.Overlap = cofficent *  (Precision.Random.limited* Recall.Random.limited)/(((beta)^2 * Precision.Random.limited)+Recall.Random.limited) 
     
    
  }
  else{
    stop("Unknown model!")
  }
  
  plot(UW.Overlap~Threholds.limited, lwd = 3, col = 'red', type= 'l', xlab='Threshold', ylab = Ylab, main = Title)
  lines(Random.Overlap~Thresholds.Random.limited , lty=2, lwd =3, col='blue')
  legend('bottomright', legend= c("Removed Based On Scores", "Removed Randomly"), col= c('red', 'blue'), text.col = c('red', 'blue'))
  
 }#plot.effects.of.randomly.removing.tags#
precision.and.recall(K562.UW.vs.TFs.File, K562.Duke.vs.TFs.File, "K562", Model='F_Score', beta = 0.5, start.Threshold=5)
precision.and.recall(K562.UW.vs.TFs.File, K562.Duke.vs.TFs.File, "K562", Model='F_Score', beta = 0.5, start.Threshold=5)
precision.and.recall(GM12878.UW.vs.TFs.File, GM12878.Duke.vs.TFs.File, "GM12878", Model='F_Score', beta = 0.5, start.Threshold=1)
precision.and.recall(HelaS3.TFs.vs.UW.File, HelaS3.TFs.vs.Duke.File, "HelaS3", Model='F_Score', beta = 0.5, start.Threshold=3)
precision.and.recall(HelaS3.TFs.vs.UW.File, HelaS3.TFs.vs.Duke.File, "HelaS3", Model='F_Score', beta = 0.5, start.Threshold=4)
precision.and.recall(HelaS3.TFs.vs.UW.File, HelaS3.TFs.vs.Duke.File, "HelaS3", Model='F_Score', beta = 0.5, start.Threshold=2)
precision.and.recall(HelaS3.TFs.vs.UW.File, HelaS3.TFs.vs.Duke.File, "HelaS3", Model='F_Score', beta = 0.5, start.Threshold=1)
par(mfrow = c(1,3))
plot.effects.of.randomly.removing.tags(K562.UW.vs.TFs.File, K562.UW.Randomly.Removed.vs.TFs.File, "UW: K562", Model='F_Score', beta = 0.5, start.Threshold=4)
plot.effects.of.randomly.removing.tags(HelaS3.UW.vs.TFs.File, HelaS3.UW.Randomly.Removed.vs.TFs.File, "UW: HelaS3", Model='F_Score', beta = 0.5, start.Threshold=4)
plot.effects.of.randomly.removing.tags(GM12878.UW.vs.TFs.File, GM12878.UW.Randomly.Removed.vs.TFs, "UW: GM12878", Model='F_Score', beta = 0.5, start.Threshold=1)
precision.and.recall(HelaS3.UW.vs.TFs.File, HelaS3.Duke.vs.TFs.File, "HelaS3", Model='F_Score', beta = 0.5, start.Threshold=5)
precision.and.recall(GM12878.UW.vs.TFs.File, GM12878.Duke.vs.TFs.File, "GM12878", Model='F_Score', beta = 0.5, start.Threshold=1)
precision.and.recall(GM12878.UW.vs.TFs.File, GM12878.Duke.vs.TFs.File, "GM12878", Model='F_Score', beta = 0.5, start.Threshold=2)
precision.and.recall(K562.UW.vs.TFs.File, K562.Duke.vs.TFs.File, "K562", Model='F_Score', beta = 0.5, start.Threshold=5)
precision.and.recall <- function(TFs.vs.UW.File, TFs.vs.Duke.File, Title, Model='Additive_Average', beta = 1, start.Threshold=1){
  
  UW.Data          = read.table(TFs.vs.UW.File)
  Precision.UW     = UW.Data[ , 5]
  Recall.UW        =  UW.Data[ , 6]
  Thresholds.UW    =  UW.Data[ , 1]
  Duke.Data       = read.table(TFs.vs.Duke.File)
  Precision.Duke  =  Duke.Data[ , 5]
  Recall.Duke     =  Duke.Data[ , 6]
  Thresholds.Duke = Duke.Data[ ,1]
  if (! all(Thresholds.UW ==  Thresholds.Duke)){
    print(paste("Threshlds used for UW and Duke do not look the same! check your data") )
  }
  par(mfrow = c(1,2))
  Precision.UW.limited = Precision.UW[start.Threshold:length(Precision.UW) ]
  Recall.UW.limited    = Recall.UW[start.Threshold:length(Recall.UW)   ]
  Threholds.limited    = Thresholds.UW[start.Threshold:length(Thresholds.UW )   ]
  
  
  Precision.Duke.limited = Precision.Duke[start.Threshold:length(Precision.Duke)  ]
  Recall.Duke.limited    = Recall.Duke[start.Threshold:length(Recall.Duke)  ]
  if(Model == 'Additive_Average'){
    UW.Overlap           = ( Precision.UW.limited + Recall.UW.limited )/2
    Duke.Overlap        = (Precision.Duke.limited + Recall.Duke.limited)/2
    Ylab   = paste(' (precision+recall)/2')
  }
  else if (Model == 'F_Score' ){
    Ylab = paste("F_",beta,"_Score", sep="")
    cofficent   = (1+(beta)^2)
     UW.Overlap   = cofficent *  (Precision.UW.limited   * Recall.UW.limited)   /(((beta)^2 * Precision.UW.limited) + Recall.UW.limited)
     Duke.Overlap = cofficent *  (Precision.Duke.limited * Recall.Duke.limited) /(((beta)^2 * Precision.Duke.limited) + Recall.Duke.limited)
    
  }
  else{
    stop("Unknown model!")
  }
  
  plot(UW.Overlap~Threholds.limited, lwd = 3, col = 'red', type= 'l', xlab='Threshold', ylab = Ylab, main = 'UW', ylim = c(0.45, 0.68))
  plot(Duke.Overlap~Threholds.limited, lwd = 3, col='blue', type='l', xlab='Threshold', ylab = Ylab, main='Duke', ylim = c(0.32, 0.55))
 }#precision.and.recall#
precision.and.recall(HelaS3.UW.vs.TFs.File, HelaS3.Duke.vs.TFs.File, "HelaS3", Model='F_Score', beta = 0.5, start.Threshold=5)
precision.and.recall(GM12878.UW.vs.TFs.File, GM12878.Duke.vs.TFs.File, "GM12878", Model='F_Score', beta = 0.5, start.Threshold=2)
precision.and.recall(K562.UW.vs.TFs.File, K562.Duke.vs.TFs.File, "K562", Model='F_Score', beta = 0.5, start.Threshold=5)
precision.and.recall <- function(TFs.vs.UW.File, TFs.vs.Duke.File, Title, Model='Additive_Average', beta = 1, start.Threshold=1){
  
  UW.Data          = read.table(TFs.vs.UW.File)
  Precision.UW     = UW.Data[ , 5]
  Recall.UW        =  UW.Data[ , 6]
  Thresholds.UW    =  UW.Data[ , 1]
  Duke.Data       = read.table(TFs.vs.Duke.File)
  Precision.Duke  =  Duke.Data[ , 5]
  Recall.Duke     =  Duke.Data[ , 6]
  Thresholds.Duke = Duke.Data[ ,1]
  if (! all(Thresholds.UW ==  Thresholds.Duke)){
    print(paste("Threshlds used for UW and Duke do not look the same! check your data") )
  }
 # par(mfrow = c(1,2))
  Precision.UW.limited = Precision.UW[start.Threshold:length(Precision.UW) ]
  Recall.UW.limited    = Recall.UW[start.Threshold:length(Recall.UW)   ]
  Threholds.limited    = Thresholds.UW[start.Threshold:length(Thresholds.UW )   ]
  
  
  Precision.Duke.limited = Precision.Duke[start.Threshold:length(Precision.Duke)  ]
  Recall.Duke.limited    = Recall.Duke[start.Threshold:length(Recall.Duke)  ]
  if(Model == 'Additive_Average'){
    UW.Overlap           = ( Precision.UW.limited + Recall.UW.limited )/2
    Duke.Overlap        = (Precision.Duke.limited + Recall.Duke.limited)/2
    Ylab   = paste(' (precision+recall)/2')
  }
  else if (Model == 'F_Score' ){
    Ylab = paste("F_",beta,"_Score", sep="")
    cofficent   = (1+(beta)^2)
     UW.Overlap   = cofficent *  (Precision.UW.limited   * Recall.UW.limited)   /(((beta)^2 * Precision.UW.limited) + Recall.UW.limited)
     Duke.Overlap = cofficent *  (Precision.Duke.limited * Recall.Duke.limited) /(((beta)^2 * Precision.Duke.limited) + Recall.Duke.limited)
    
  }
  else{
    stop("Unknown model!")
  }
  
  plot(UW.Overlap~Threholds.limited, lwd = 3, col = 'red', type= 'l', xlab='Threshold', ylab = Ylab, main = 'UW', ylim = c(0.45, 0.68))
  plot(Duke.Overlap~Threholds.limited, lwd = 3, col='blue', type='l', xlab='Threshold', ylab = Ylab, main='Duke', ylim = c(0.32, 0.55))
 }#precision.and.recall#
par(mfrow = c(2,3))
precision.and.recall(HelaS3.UW.vs.TFs.File, HelaS3.Duke.vs.TFs.File, "HelaS3", Model='F_Score', beta = 0.5, start.Threshold=5)
precision.and.recall(GM12878.UW.vs.TFs.File, GM12878.Duke.vs.TFs.File, "GM12878", Model='F_Score', beta = 0.5, start.Threshold=2)
precision.and.recall(K562.UW.vs.TFs.File, K562.Duke.vs.TFs.File, "K562", Model='F_Score', beta = 0.5, start.Threshold=5)
par(mfrow = c(3,2))
precision.and.recall(HelaS3.UW.vs.TFs.File, HelaS3.Duke.vs.TFs.File, "HelaS3", Model='F_Score', beta = 0.5, start.Threshold=5)
precision.and.recall(GM12878.UW.vs.TFs.File, GM12878.Duke.vs.TFs.File, "GM12878", Model='F_Score', beta = 0.5, start.Threshold=2)
precision.and.recall(K562.UW.vs.TFs.File, K562.Duke.vs.TFs.File, "K562", Model='F_Score', beta = 0.5, start.Threshold=5)
precision.and.recall(K562.UW.vs.TFs.File, K562.Duke.vs.TFs.File, "K562", Model='F_Score', beta = 0.5, start.Threshold=5)
